********************Predictive Analysis Table********************
M[S][IDN] = S->func
M[S][(] = 
M[S][)] = 
M[S][int] = S->func
M[S][char] = S->func
M[S][float] = S->func
M[S][void] = S->func
M[S][,] = 
M[S][;] = 
M[S][{] = 
M[S][}] = 
M[S][init] = 
M[S][continue] = 
M[S][break] = 
M[S][return] = 
M[S][while] = 
M[S][for] = 
M[S][if] = 
M[S][else] = 
M[S][&&] = 
M[S][||] = 
M[S][++] = 
M[S][--] = 
M[S][>] = 
M[S][>=] = 
M[S][<] = 
M[S][<=] = 
M[S][==] = 
M[S][!=] = 
M[S][=] = 
M[S][+=] = 
M[S][-=] = 
M[S][*=] = 
M[S][/=] = 
M[S][%=] = 
M[S][+] = 
M[S][-] = 
M[S][*] = 
M[S][/] = 
M[S][%] = 
M[S][FLOAT] = 
M[S][CHAR] = 
M[S][STR] = 
M[S][INT] = 


M[func][IDN] = 
M[func][(] = 
M[func][)] = func->typeIDN(args)func_body
M[func][int] = func->typeIDN(args)func_body
M[func][char] = func->typeIDN(args)func_body
M[func][float] = func->typeIDN(args)func_body
M[func][void] = func->typeIDN(args)func_body
M[func][,] = 
M[func][;] = 
M[func][{] = 
M[func][}] = 
M[func][init] = 
M[func][continue] = 
M[func][break] = 
M[func][return] = 
M[func][while] = 
M[func][for] = 
M[func][if] = 
M[func][else] = 
M[func][&&] = 
M[func][||] = 
M[func][++] = 
M[func][--] = 
M[func][>] = 
M[func][>=] = 
M[func][<] = 
M[func][<=] = 
M[func][==] = 
M[func][!=] = 
M[func][=] = 
M[func][+=] = 
M[func][-=] = 
M[func][*=] = 
M[func][/=] = 
M[func][%=] = 
M[func][+] = 
M[func][-] = 
M[func][*] = 
M[func][/] = 
M[func][%] = 
M[func][FLOAT] = 
M[func][CHAR] = 
M[func][STR] = 
M[func][INT] = 


M[type][IDN] = type->$
M[type][(] = type->$
M[type][)] = 
M[type][int] = type->int
M[type][char] = type->char
M[type][float] = type->float
M[type][void] = type->void
M[type][,] = 
M[type][;] = 
M[type][{] = 
M[type][}] = 
M[type][init] = 
M[type][continue] = 
M[type][break] = 
M[type][return] = 
M[type][while] = 
M[type][for] = 
M[type][if] = 
M[type][else] = 
M[type][&&] = 
M[type][||] = 
M[type][++] = 
M[type][--] = 
M[type][>] = 
M[type][>=] = 
M[type][<] = 
M[type][<=] = 
M[type][==] = 
M[type][!=] = 
M[type][=] = 
M[type][+=] = 
M[type][-=] = 
M[type][*=] = 
M[type][/=] = 
M[type][%=] = 
M[type][+] = 
M[type][-] = 
M[type][*] = 
M[type][/] = 
M[type][%] = 
M[type][FLOAT] = type->$
M[type][CHAR] = type->$
M[type][STR] = type->$
M[type][INT] = type->$


M[args][IDN] = 
M[args][(] = 
M[args][)] = args->$
M[args][int] = args->typeIDNarg
M[args][char] = args->typeIDNarg
M[args][float] = args->typeIDNarg
M[args][void] = args->typeIDNarg
M[args][,] = 
M[args][;] = 
M[args][{] = 
M[args][}] = 
M[args][init] = 
M[args][continue] = 
M[args][break] = 
M[args][return] = 
M[args][while] = 
M[args][for] = 
M[args][if] = 
M[args][else] = 
M[args][&&] = 
M[args][||] = 
M[args][++] = 
M[args][--] = 
M[args][>] = 
M[args][>=] = 
M[args][<] = 
M[args][<=] = 
M[args][==] = 
M[args][!=] = 
M[args][=] = 
M[args][+=] = 
M[args][-=] = 
M[args][*=] = 
M[args][/=] = 
M[args][%=] = 
M[args][+] = 
M[args][-] = 
M[args][*] = 
M[args][/] = 
M[args][%] = 
M[args][FLOAT] = 
M[args][CHAR] = 
M[args][STR] = 
M[args][INT] = 


M[func_body][IDN] = 
M[func_body][(] = 
M[func_body][)] = 
M[func_body][int] = 
M[func_body][char] = 
M[func_body][float] = 
M[func_body][void] = 
M[func_body][,] = 
M[func_body][;] = func_body->;
M[func_body][{] = func_body->block
M[func_body][}] = 
M[func_body][init] = 
M[func_body][continue] = 
M[func_body][break] = 
M[func_body][return] = 
M[func_body][while] = 
M[func_body][for] = 
M[func_body][if] = 
M[func_body][else] = 
M[func_body][&&] = 
M[func_body][||] = 
M[func_body][++] = 
M[func_body][--] = 
M[func_body][>] = 
M[func_body][>=] = 
M[func_body][<] = 
M[func_body][<=] = 
M[func_body][==] = 
M[func_body][!=] = 
M[func_body][=] = 
M[func_body][+=] = 
M[func_body][-=] = 
M[func_body][*=] = 
M[func_body][/=] = 
M[func_body][%=] = 
M[func_body][+] = 
M[func_body][-] = 
M[func_body][*] = 
M[func_body][/] = 
M[func_body][%] = 
M[func_body][FLOAT] = 
M[func_body][CHAR] = 
M[func_body][STR] = 
M[func_body][INT] = 


M[arg][IDN] = 
M[arg][(] = 
M[arg][)] = arg->$
M[arg][int] = 
M[arg][char] = 
M[arg][float] = 
M[arg][void] = 
M[arg][,] = arg->,typeIDNarg
M[arg][;] = 
M[arg][{] = 
M[arg][}] = 
M[arg][init] = 
M[arg][continue] = 
M[arg][break] = 
M[arg][return] = 
M[arg][while] = 
M[arg][for] = 
M[arg][if] = 
M[arg][else] = 
M[arg][&&] = 
M[arg][||] = 
M[arg][++] = 
M[arg][--] = 
M[arg][>] = 
M[arg][>=] = 
M[arg][<] = 
M[arg][<=] = 
M[arg][==] = 
M[arg][!=] = 
M[arg][=] = 
M[arg][+=] = 
M[arg][-=] = 
M[arg][*=] = 
M[arg][/=] = 
M[arg][%=] = 
M[arg][+] = 
M[arg][-] = 
M[arg][*] = 
M[arg][/] = 
M[arg][%] = 
M[arg][FLOAT] = 
M[arg][CHAR] = 
M[arg][STR] = 
M[arg][INT] = 


M[block][IDN] = 
M[block][(] = 
M[block][)] = 
M[block][int] = 
M[block][char] = 
M[block][float] = 
M[block][void] = 
M[block][,] = 
M[block][;] = 
M[block][{] = block->{stmts}
M[block][}] = 
M[block][init] = 
M[block][continue] = 
M[block][break] = 
M[block][return] = 
M[block][while] = 
M[block][for] = 
M[block][if] = 
M[block][else] = 
M[block][&&] = 
M[block][||] = 
M[block][++] = 
M[block][--] = 
M[block][>] = 
M[block][>=] = 
M[block][<] = 
M[block][<=] = 
M[block][==] = 
M[block][!=] = 
M[block][=] = 
M[block][+=] = 
M[block][-=] = 
M[block][*=] = 
M[block][/=] = 
M[block][%=] = 
M[block][+] = 
M[block][-] = 
M[block][*] = 
M[block][/] = 
M[block][%] = 
M[block][FLOAT] = 
M[block][CHAR] = 
M[block][STR] = 
M[block][INT] = 


M[stmts][IDN] = stmts->stmtstmts
M[stmts][(] = stmts->stmtstmts
M[stmts][)] = 
M[stmts][int] = stmts->stmtstmts
M[stmts][char] = stmts->stmtstmts
M[stmts][float] = stmts->stmtstmts
M[stmts][void] = stmts->stmtstmts
M[stmts][,] = 
M[stmts][;] = 
M[stmts][{] = 
M[stmts][}] = stmts->$
M[stmts][init] = 
M[stmts][continue] = stmts->stmtstmts
M[stmts][break] = stmts->stmtstmts
M[stmts][return] = stmts->stmtstmts
M[stmts][while] = stmts->stmtstmts
M[stmts][for] = stmts->stmtstmts
M[stmts][if] = stmts->stmtstmts
M[stmts][else] = 
M[stmts][&&] = 
M[stmts][||] = 
M[stmts][++] = 
M[stmts][--] = 
M[stmts][>] = 
M[stmts][>=] = 
M[stmts][<] = 
M[stmts][<=] = 
M[stmts][==] = 
M[stmts][!=] = 
M[stmts][=] = 
M[stmts][+=] = 
M[stmts][-=] = 
M[stmts][*=] = 
M[stmts][/=] = 
M[stmts][%=] = 
M[stmts][+] = 
M[stmts][-] = 
M[stmts][*] = 
M[stmts][/] = 
M[stmts][%] = 
M[stmts][FLOAT] = stmts->stmtstmts
M[stmts][CHAR] = stmts->stmtstmts
M[stmts][STR] = stmts->stmtstmts
M[stmts][INT] = stmts->stmtstmts


M[vars][IDN] = 
M[vars][(] = 
M[vars][)] = 
M[vars][int] = 
M[vars][char] = 
M[vars][float] = 
M[vars][void] = 
M[vars][,] = vars->,IDNinitvars
M[vars][;] = 
M[vars][{] = 
M[vars][}] = 
M[vars][init] = 
M[vars][continue] = 
M[vars][break] = 
M[vars][return] = 
M[vars][while] = 
M[vars][for] = 
M[vars][if] = 
M[vars][else] = 
M[vars][&&] = 
M[vars][||] = 
M[vars][++] = 
M[vars][--] = 
M[vars][>] = 
M[vars][>=] = 
M[vars][<] = 
M[vars][<=] = 
M[vars][==] = 
M[vars][!=] = 
M[vars][=] = 
M[vars][+=] = 
M[vars][-=] = 
M[vars][*=] = 
M[vars][/=] = 
M[vars][%=] = 
M[vars][+] = 
M[vars][-] = 
M[vars][*] = 
M[vars][/] = 
M[vars][%] = 
M[vars][FLOAT] = 
M[vars][CHAR] = 
M[vars][STR] = 
M[vars][INT] = 


M[stmt][IDN] = stmt->typeassign_stmt
M[stmt][(] = stmt->typeassign_stmt
M[stmt][)] = 
M[stmt][int] = stmt->typeassign_stmt
M[stmt][char] = stmt->typeassign_stmt
M[stmt][float] = stmt->typeassign_stmt
M[stmt][void] = stmt->typeassign_stmt
M[stmt][,] = 
M[stmt][;] = 
M[stmt][{] = 
M[stmt][}] = 
M[stmt][init] = 
M[stmt][continue] = stmt->jump_stmt
M[stmt][break] = stmt->jump_stmt
M[stmt][return] = stmt->jump_stmt
M[stmt][while] = stmt->iteration_stmt
M[stmt][for] = stmt->iteration_stmt
M[stmt][if] = stmt->branch_stmt
M[stmt][else] = 
M[stmt][&&] = 
M[stmt][||] = 
M[stmt][++] = 
M[stmt][--] = 
M[stmt][>] = 
M[stmt][>=] = 
M[stmt][<] = 
M[stmt][<=] = 
M[stmt][==] = 
M[stmt][!=] = 
M[stmt][=] = 
M[stmt][+=] = 
M[stmt][-=] = 
M[stmt][*=] = 
M[stmt][/=] = 
M[stmt][%=] = 
M[stmt][+] = 
M[stmt][-] = 
M[stmt][*] = 
M[stmt][/] = 
M[stmt][%] = 
M[stmt][FLOAT] = stmt->typeassign_stmt
M[stmt][CHAR] = stmt->typeassign_stmt
M[stmt][STR] = stmt->typeassign_stmt
M[stmt][INT] = stmt->typeassign_stmt


M[assign_stmt][IDN] = assign_stmt->expression;
M[assign_stmt][(] = assign_stmt->expression;
M[assign_stmt][)] = 
M[assign_stmt][int] = 
M[assign_stmt][char] = 
M[assign_stmt][float] = 
M[assign_stmt][void] = 
M[assign_stmt][,] = 
M[assign_stmt][;] = 
M[assign_stmt][{] = 
M[assign_stmt][}] = 
M[assign_stmt][init] = 
M[assign_stmt][continue] = 
M[assign_stmt][break] = 
M[assign_stmt][return] = 
M[assign_stmt][while] = 
M[assign_stmt][for] = 
M[assign_stmt][if] = 
M[assign_stmt][else] = 
M[assign_stmt][&&] = 
M[assign_stmt][||] = 
M[assign_stmt][++] = 
M[assign_stmt][--] = 
M[assign_stmt][>] = 
M[assign_stmt][>=] = 
M[assign_stmt][<] = 
M[assign_stmt][<=] = 
M[assign_stmt][==] = 
M[assign_stmt][!=] = 
M[assign_stmt][=] = 
M[assign_stmt][+=] = 
M[assign_stmt][-=] = 
M[assign_stmt][*=] = 
M[assign_stmt][/=] = 
M[assign_stmt][%=] = 
M[assign_stmt][+] = 
M[assign_stmt][-] = 
M[assign_stmt][*] = 
M[assign_stmt][/] = 
M[assign_stmt][%] = 
M[assign_stmt][FLOAT] = assign_stmt->expression;
M[assign_stmt][CHAR] = assign_stmt->expression;
M[assign_stmt][STR] = assign_stmt->expression;
M[assign_stmt][INT] = assign_stmt->expression;


M[jump_stmt][IDN] = 
M[jump_stmt][(] = 
M[jump_stmt][)] = 
M[jump_stmt][int] = 
M[jump_stmt][char] = 
M[jump_stmt][float] = 
M[jump_stmt][void] = 
M[jump_stmt][,] = 
M[jump_stmt][;] = 
M[jump_stmt][{] = 
M[jump_stmt][}] = 
M[jump_stmt][init] = 
M[jump_stmt][continue] = jump_stmt->continue;
M[jump_stmt][break] = jump_stmt->break;
M[jump_stmt][return] = jump_stmt->returnisnull_expr;
M[jump_stmt][while] = 
M[jump_stmt][for] = 
M[jump_stmt][if] = 
M[jump_stmt][else] = 
M[jump_stmt][&&] = 
M[jump_stmt][||] = 
M[jump_stmt][++] = 
M[jump_stmt][--] = 
M[jump_stmt][>] = 
M[jump_stmt][>=] = 
M[jump_stmt][<] = 
M[jump_stmt][<=] = 
M[jump_stmt][==] = 
M[jump_stmt][!=] = 
M[jump_stmt][=] = 
M[jump_stmt][+=] = 
M[jump_stmt][-=] = 
M[jump_stmt][*=] = 
M[jump_stmt][/=] = 
M[jump_stmt][%=] = 
M[jump_stmt][+] = 
M[jump_stmt][-] = 
M[jump_stmt][*] = 
M[jump_stmt][/] = 
M[jump_stmt][%] = 
M[jump_stmt][FLOAT] = 
M[jump_stmt][CHAR] = 
M[jump_stmt][STR] = 
M[jump_stmt][INT] = 


M[iteration_stmt][IDN] = 
M[iteration_stmt][(] = 
M[iteration_stmt][)] = 
M[iteration_stmt][int] = 
M[iteration_stmt][char] = 
M[iteration_stmt][float] = 
M[iteration_stmt][void] = 
M[iteration_stmt][,] = 
M[iteration_stmt][;] = 
M[iteration_stmt][{] = 
M[iteration_stmt][}] = 
M[iteration_stmt][init] = 
M[iteration_stmt][continue] = 
M[iteration_stmt][break] = 
M[iteration_stmt][return] = 
M[iteration_stmt][while] = iteration_stmt->while(logical_expression)block
M[iteration_stmt][for] = iteration_stmt->for(isnull_expr;isnull_expr;isnull_expr)block
M[iteration_stmt][if] = 
M[iteration_stmt][else] = 
M[iteration_stmt][&&] = 
M[iteration_stmt][||] = 
M[iteration_stmt][++] = 
M[iteration_stmt][--] = 
M[iteration_stmt][>] = 
M[iteration_stmt][>=] = 
M[iteration_stmt][<] = 
M[iteration_stmt][<=] = 
M[iteration_stmt][==] = 
M[iteration_stmt][!=] = 
M[iteration_stmt][=] = 
M[iteration_stmt][+=] = 
M[iteration_stmt][-=] = 
M[iteration_stmt][*=] = 
M[iteration_stmt][/=] = 
M[iteration_stmt][%=] = 
M[iteration_stmt][+] = 
M[iteration_stmt][-] = 
M[iteration_stmt][*] = 
M[iteration_stmt][/] = 
M[iteration_stmt][%] = 
M[iteration_stmt][FLOAT] = 
M[iteration_stmt][CHAR] = 
M[iteration_stmt][STR] = 
M[iteration_stmt][INT] = 


M[branch_stmt][IDN] = 
M[branch_stmt][(] = 
M[branch_stmt][)] = 
M[branch_stmt][int] = 
M[branch_stmt][char] = 
M[branch_stmt][float] = 
M[branch_stmt][void] = 
M[branch_stmt][,] = 
M[branch_stmt][;] = 
M[branch_stmt][{] = 
M[branch_stmt][}] = 
M[branch_stmt][init] = 
M[branch_stmt][continue] = 
M[branch_stmt][break] = 
M[branch_stmt][return] = 
M[branch_stmt][while] = 
M[branch_stmt][for] = 
M[branch_stmt][if] = branch_stmt->if(logical_expression)blockresult
M[branch_stmt][else] = 
M[branch_stmt][&&] = 
M[branch_stmt][||] = 
M[branch_stmt][++] = 
M[branch_stmt][--] = 
M[branch_stmt][>] = 
M[branch_stmt][>=] = 
M[branch_stmt][<] = 
M[branch_stmt][<=] = 
M[branch_stmt][==] = 
M[branch_stmt][!=] = 
M[branch_stmt][=] = 
M[branch_stmt][+=] = 
M[branch_stmt][-=] = 
M[branch_stmt][*=] = 
M[branch_stmt][/=] = 
M[branch_stmt][%=] = 
M[branch_stmt][+] = 
M[branch_stmt][-] = 
M[branch_stmt][*] = 
M[branch_stmt][/] = 
M[branch_stmt][%] = 
M[branch_stmt][FLOAT] = 
M[branch_stmt][CHAR] = 
M[branch_stmt][STR] = 
M[branch_stmt][INT] = 


M[expression][IDN] = expression->valueoperation
M[expression][(] = expression->valueoperation
M[expression][)] = 
M[expression][int] = 
M[expression][char] = 
M[expression][float] = 
M[expression][void] = 
M[expression][,] = 
M[expression][;] = 
M[expression][{] = 
M[expression][}] = 
M[expression][init] = 
M[expression][continue] = 
M[expression][break] = 
M[expression][return] = 
M[expression][while] = 
M[expression][for] = 
M[expression][if] = 
M[expression][else] = 
M[expression][&&] = 
M[expression][||] = 
M[expression][++] = 
M[expression][--] = 
M[expression][>] = 
M[expression][>=] = 
M[expression][<] = 
M[expression][<=] = 
M[expression][==] = 
M[expression][!=] = 
M[expression][=] = 
M[expression][+=] = 
M[expression][-=] = 
M[expression][*=] = 
M[expression][/=] = 
M[expression][%=] = 
M[expression][+] = 
M[expression][-] = 
M[expression][*] = 
M[expression][/] = 
M[expression][%] = 
M[expression][FLOAT] = expression->valueoperation
M[expression][CHAR] = expression->valueoperation
M[expression][STR] = expression->valueoperation
M[expression][INT] = expression->valueoperation


M[isnull_expr][IDN] = isnull_expr->expression
M[isnull_expr][(] = isnull_expr->expression
M[isnull_expr][)] = isnull_expr->$
M[isnull_expr][int] = 
M[isnull_expr][char] = 
M[isnull_expr][float] = 
M[isnull_expr][void] = 
M[isnull_expr][,] = isnull_expr->$
M[isnull_expr][;] = isnull_expr->$
M[isnull_expr][{] = 
M[isnull_expr][}] = 
M[isnull_expr][init] = 
M[isnull_expr][continue] = 
M[isnull_expr][break] = 
M[isnull_expr][return] = 
M[isnull_expr][while] = 
M[isnull_expr][for] = 
M[isnull_expr][if] = 
M[isnull_expr][else] = 
M[isnull_expr][&&] = 
M[isnull_expr][||] = 
M[isnull_expr][++] = 
M[isnull_expr][--] = 
M[isnull_expr][>] = 
M[isnull_expr][>=] = 
M[isnull_expr][<] = 
M[isnull_expr][<=] = 
M[isnull_expr][==] = 
M[isnull_expr][!=] = 
M[isnull_expr][=] = 
M[isnull_expr][+=] = 
M[isnull_expr][-=] = 
M[isnull_expr][*=] = 
M[isnull_expr][/=] = 
M[isnull_expr][%=] = 
M[isnull_expr][+] = 
M[isnull_expr][-] = 
M[isnull_expr][*] = 
M[isnull_expr][/] = 
M[isnull_expr][%] = 
M[isnull_expr][FLOAT] = isnull_expr->expression
M[isnull_expr][CHAR] = isnull_expr->expression
M[isnull_expr][STR] = isnull_expr->expression
M[isnull_expr][INT] = isnull_expr->expression


M[logical_expression][IDN] = logical_expression->expressionbool_expression
M[logical_expression][(] = logical_expression->expressionbool_expression
M[logical_expression][)] = 
M[logical_expression][int] = 
M[logical_expression][char] = 
M[logical_expression][float] = 
M[logical_expression][void] = 
M[logical_expression][,] = 
M[logical_expression][;] = 
M[logical_expression][{] = 
M[logical_expression][}] = 
M[logical_expression][init] = 
M[logical_expression][continue] = 
M[logical_expression][break] = 
M[logical_expression][return] = 
M[logical_expression][while] = 
M[logical_expression][for] = 
M[logical_expression][if] = 
M[logical_expression][else] = 
M[logical_expression][&&] = 
M[logical_expression][||] = 
M[logical_expression][++] = 
M[logical_expression][--] = 
M[logical_expression][>] = 
M[logical_expression][>=] = 
M[logical_expression][<] = 
M[logical_expression][<=] = 
M[logical_expression][==] = 
M[logical_expression][!=] = 
M[logical_expression][=] = 
M[logical_expression][+=] = 
M[logical_expression][-=] = 
M[logical_expression][*=] = 
M[logical_expression][/=] = 
M[logical_expression][%=] = 
M[logical_expression][+] = 
M[logical_expression][-] = 
M[logical_expression][*] = 
M[logical_expression][/] = 
M[logical_expression][%] = 
M[logical_expression][FLOAT] = logical_expression->expressionbool_expression
M[logical_expression][CHAR] = logical_expression->expressionbool_expression
M[logical_expression][STR] = logical_expression->expressionbool_expression
M[logical_expression][INT] = logical_expression->expressionbool_expression


M[result][IDN] = result->$
M[result][(] = result->$
M[result][)] = 
M[result][int] = result->$
M[result][char] = result->$
M[result][float] = result->$
M[result][void] = result->$
M[result][,] = 
M[result][;] = 
M[result][{] = 
M[result][}] = result->$
M[result][init] = 
M[result][continue] = result->$
M[result][break] = result->$
M[result][return] = result->$
M[result][while] = result->$
M[result][for] = result->$
M[result][if] = result->$
M[result][else] = result->elseblock
M[result][&&] = 
M[result][||] = 
M[result][++] = 
M[result][--] = 
M[result][>] = 
M[result][>=] = 
M[result][<] = 
M[result][<=] = 
M[result][==] = 
M[result][!=] = 
M[result][=] = 
M[result][+=] = 
M[result][-=] = 
M[result][*=] = 
M[result][/=] = 
M[result][%=] = 
M[result][+] = 
M[result][-] = 
M[result][*] = 
M[result][/] = 
M[result][%] = 
M[result][FLOAT] = result->$
M[result][CHAR] = result->$
M[result][STR] = result->$
M[result][INT] = result->$


M[bool_expression][IDN] = 
M[bool_expression][(] = 
M[bool_expression][)] = bool_expression->$
M[bool_expression][int] = 
M[bool_expression][char] = 
M[bool_expression][float] = 
M[bool_expression][void] = 
M[bool_expression][,] = 
M[bool_expression][;] = 
M[bool_expression][{] = 
M[bool_expression][}] = 
M[bool_expression][init] = 
M[bool_expression][continue] = 
M[bool_expression][break] = 
M[bool_expression][return] = 
M[bool_expression][while] = 
M[bool_expression][for] = 
M[bool_expression][if] = 
M[bool_expression][else] = 
M[bool_expression][&&] = bool_expression->lopexpressionbool_expression
M[bool_expression][||] = bool_expression->lopexpressionbool_expression
M[bool_expression][++] = 
M[bool_expression][--] = 
M[bool_expression][>] = 
M[bool_expression][>=] = 
M[bool_expression][<] = 
M[bool_expression][<=] = 
M[bool_expression][==] = 
M[bool_expression][!=] = 
M[bool_expression][=] = 
M[bool_expression][+=] = 
M[bool_expression][-=] = 
M[bool_expression][*=] = 
M[bool_expression][/=] = 
M[bool_expression][%=] = 
M[bool_expression][+] = 
M[bool_expression][-] = 
M[bool_expression][*] = 
M[bool_expression][/] = 
M[bool_expression][%] = 
M[bool_expression][FLOAT] = 
M[bool_expression][CHAR] = 
M[bool_expression][STR] = 
M[bool_expression][INT] = 


M[lop][IDN] = 
M[lop][(] = 
M[lop][)] = 
M[lop][int] = 
M[lop][char] = 
M[lop][float] = 
M[lop][void] = 
M[lop][,] = 
M[lop][;] = 
M[lop][{] = 
M[lop][}] = 
M[lop][init] = 
M[lop][continue] = 
M[lop][break] = 
M[lop][return] = 
M[lop][while] = 
M[lop][for] = 
M[lop][if] = 
M[lop][else] = 
M[lop][&&] = lop->&&
M[lop][||] = lop->||
M[lop][++] = 
M[lop][--] = 
M[lop][>] = 
M[lop][>=] = 
M[lop][<] = 
M[lop][<=] = 
M[lop][==] = 
M[lop][!=] = 
M[lop][=] = 
M[lop][+=] = 
M[lop][-=] = 
M[lop][*=] = 
M[lop][/=] = 
M[lop][%=] = 
M[lop][+] = 
M[lop][-] = 
M[lop][*] = 
M[lop][/] = 
M[lop][%] = 
M[lop][FLOAT] = 
M[lop][CHAR] = 
M[lop][STR] = 
M[lop][INT] = 


M[value][IDN] = value->itemvalue'
M[value][(] = value->itemvalue'
M[value][)] = 
M[value][int] = 
M[value][char] = 
M[value][float] = 
M[value][void] = 
M[value][,] = 
M[value][;] = 
M[value][{] = 
M[value][}] = 
M[value][init] = 
M[value][continue] = 
M[value][break] = 
M[value][return] = 
M[value][while] = 
M[value][for] = 
M[value][if] = 
M[value][else] = 
M[value][&&] = 
M[value][||] = 
M[value][++] = 
M[value][--] = 
M[value][>] = 
M[value][>=] = 
M[value][<] = 
M[value][<=] = 
M[value][==] = 
M[value][!=] = 
M[value][=] = 
M[value][+=] = 
M[value][-=] = 
M[value][*=] = 
M[value][/=] = 
M[value][%=] = 
M[value][+] = 
M[value][-] = 
M[value][*] = 
M[value][/] = 
M[value][%] = 
M[value][FLOAT] = value->itemvalue'
M[value][CHAR] = value->itemvalue'
M[value][STR] = value->itemvalue'
M[value][INT] = value->itemvalue'


M[operation][IDN] = 
M[operation][(] = 
M[operation][)] = operation->$
M[operation][int] = 
M[operation][char] = 
M[operation][float] = 
M[operation][void] = 
M[operation][,] = operation->$
M[operation][;] = operation->$
M[operation][{] = 
M[operation][}] = 
M[operation][init] = 
M[operation][continue] = 
M[operation][break] = 
M[operation][return] = 
M[operation][while] = 
M[operation][for] = 
M[operation][if] = 
M[operation][else] = 
M[operation][&&] = operation->$
M[operation][||] = operation->$
M[operation][++] = operation->++
M[operation][--] = operation->--
M[operation][>] = operation->compare_opvalue
M[operation][>=] = operation->compare_opvalue
M[operation][<] = operation->compare_opvalue
M[operation][<=] = operation->compare_opvalue
M[operation][==] = operation->compare_opvalue
M[operation][!=] = operation->compare_opvalue
M[operation][=] = operation->equal_opvalue
M[operation][+=] = operation->equal_opvalue
M[operation][-=] = operation->equal_opvalue
M[operation][*=] = operation->equal_opvalue
M[operation][/=] = operation->equal_opvalue
M[operation][%=] = operation->equal_opvalue
M[operation][+] = 
M[operation][-] = 
M[operation][*] = 
M[operation][/] = 
M[operation][%] = 
M[operation][FLOAT] = 
M[operation][CHAR] = 
M[operation][STR] = 
M[operation][INT] = 


M[compare_op][IDN] = 
M[compare_op][(] = 
M[compare_op][)] = 
M[compare_op][int] = 
M[compare_op][char] = 
M[compare_op][float] = 
M[compare_op][void] = 
M[compare_op][,] = 
M[compare_op][;] = 
M[compare_op][{] = 
M[compare_op][}] = 
M[compare_op][init] = 
M[compare_op][continue] = 
M[compare_op][break] = 
M[compare_op][return] = 
M[compare_op][while] = 
M[compare_op][for] = 
M[compare_op][if] = 
M[compare_op][else] = 
M[compare_op][&&] = 
M[compare_op][||] = 
M[compare_op][++] = 
M[compare_op][--] = 
M[compare_op][>] = compare_op->>
M[compare_op][>=] = compare_op->>=
M[compare_op][<] = compare_op-><
M[compare_op][<=] = compare_op-><=
M[compare_op][==] = compare_op->==
M[compare_op][!=] = compare_op->!=
M[compare_op][=] = 
M[compare_op][+=] = 
M[compare_op][-=] = 
M[compare_op][*=] = 
M[compare_op][/=] = 
M[compare_op][%=] = 
M[compare_op][+] = 
M[compare_op][-] = 
M[compare_op][*] = 
M[compare_op][/] = 
M[compare_op][%] = 
M[compare_op][FLOAT] = 
M[compare_op][CHAR] = 
M[compare_op][STR] = 
M[compare_op][INT] = 


M[equal_op][IDN] = 
M[equal_op][(] = 
M[equal_op][)] = 
M[equal_op][int] = 
M[equal_op][char] = 
M[equal_op][float] = 
M[equal_op][void] = 
M[equal_op][,] = 
M[equal_op][;] = 
M[equal_op][{] = 
M[equal_op][}] = 
M[equal_op][init] = 
M[equal_op][continue] = 
M[equal_op][break] = 
M[equal_op][return] = 
M[equal_op][while] = 
M[equal_op][for] = 
M[equal_op][if] = 
M[equal_op][else] = 
M[equal_op][&&] = 
M[equal_op][||] = 
M[equal_op][++] = 
M[equal_op][--] = 
M[equal_op][>] = 
M[equal_op][>=] = 
M[equal_op][<] = 
M[equal_op][<=] = 
M[equal_op][==] = 
M[equal_op][!=] = 
M[equal_op][=] = equal_op->=
M[equal_op][+=] = equal_op->+=
M[equal_op][-=] = equal_op->-=
M[equal_op][*=] = equal_op->*=
M[equal_op][/=] = equal_op->/=
M[equal_op][%=] = equal_op->%=
M[equal_op][+] = 
M[equal_op][-] = 
M[equal_op][*] = 
M[equal_op][/] = 
M[equal_op][%] = 
M[equal_op][FLOAT] = 
M[equal_op][CHAR] = 
M[equal_op][STR] = 
M[equal_op][INT] = 


M[item][IDN] = item->factoritem'
M[item][(] = item->factoritem'
M[item][)] = 
M[item][int] = 
M[item][char] = 
M[item][float] = 
M[item][void] = 
M[item][,] = 
M[item][;] = 
M[item][{] = 
M[item][}] = 
M[item][init] = 
M[item][continue] = 
M[item][break] = 
M[item][return] = 
M[item][while] = 
M[item][for] = 
M[item][if] = 
M[item][else] = 
M[item][&&] = 
M[item][||] = 
M[item][++] = 
M[item][--] = 
M[item][>] = 
M[item][>=] = 
M[item][<] = 
M[item][<=] = 
M[item][==] = 
M[item][!=] = 
M[item][=] = 
M[item][+=] = 
M[item][-=] = 
M[item][*=] = 
M[item][/=] = 
M[item][%=] = 
M[item][+] = 
M[item][-] = 
M[item][*] = 
M[item][/] = 
M[item][%] = 
M[item][FLOAT] = item->factoritem'
M[item][CHAR] = item->factoritem'
M[item][STR] = item->factoritem'
M[item][INT] = item->factoritem'


M[value'][IDN] = 
M[value'][(] = 
M[value'][)] = value'->$
M[value'][int] = 
M[value'][char] = 
M[value'][float] = 
M[value'][void] = 
M[value'][,] = value'->$
M[value'][;] = value'->$
M[value'][{] = 
M[value'][}] = 
M[value'][init] = 
M[value'][continue] = 
M[value'][break] = 
M[value'][return] = 
M[value'][while] = 
M[value'][for] = 
M[value'][if] = 
M[value'][else] = 
M[value'][&&] = value'->$
M[value'][||] = value'->$
M[value'][++] = value'->$
M[value'][--] = value'->$
M[value'][>] = value'->$
M[value'][>=] = value'->$
M[value'][<] = value'->$
M[value'][<=] = value'->$
M[value'][==] = value'->$
M[value'][!=] = value'->$
M[value'][=] = value'->$
M[value'][+=] = value'->$
M[value'][-=] = value'->$
M[value'][*=] = value'->$
M[value'][/=] = value'->$
M[value'][%=] = value'->$
M[value'][+] = value'->+itemvalue'
M[value'][-] = value'->-itemvalue'
M[value'][*] = 
M[value'][/] = 
M[value'][%] = 
M[value'][FLOAT] = 
M[value'][CHAR] = 
M[value'][STR] = 
M[value'][INT] = 


M[factor][IDN] = factor->IDNcall_func
M[factor][(] = factor->(value)
M[factor][)] = 
M[factor][int] = 
M[factor][char] = 
M[factor][float] = 
M[factor][void] = 
M[factor][,] = 
M[factor][;] = 
M[factor][{] = 
M[factor][}] = 
M[factor][init] = 
M[factor][continue] = 
M[factor][break] = 
M[factor][return] = 
M[factor][while] = 
M[factor][for] = 
M[factor][if] = 
M[factor][else] = 
M[factor][&&] = 
M[factor][||] = 
M[factor][++] = 
M[factor][--] = 
M[factor][>] = 
M[factor][>=] = 
M[factor][<] = 
M[factor][<=] = 
M[factor][==] = 
M[factor][!=] = 
M[factor][=] = 
M[factor][+=] = 
M[factor][-=] = 
M[factor][*=] = 
M[factor][/=] = 
M[factor][%=] = 
M[factor][+] = 
M[factor][-] = 
M[factor][*] = 
M[factor][/] = 
M[factor][%] = 
M[factor][FLOAT] = factor->const
M[factor][CHAR] = factor->const
M[factor][STR] = factor->const
M[factor][INT] = factor->const


M[item'][IDN] = 
M[item'][(] = 
M[item'][)] = item'->$
M[item'][int] = 
M[item'][char] = 
M[item'][float] = 
M[item'][void] = 
M[item'][,] = item'->$
M[item'][;] = item'->$
M[item'][{] = 
M[item'][}] = 
M[item'][init] = 
M[item'][continue] = 
M[item'][break] = 
M[item'][return] = 
M[item'][while] = 
M[item'][for] = 
M[item'][if] = 
M[item'][else] = 
M[item'][&&] = item'->$
M[item'][||] = item'->$
M[item'][++] = item'->$
M[item'][--] = item'->$
M[item'][>] = item'->$
M[item'][>=] = item'->$
M[item'][<] = item'->$
M[item'][<=] = item'->$
M[item'][==] = item'->$
M[item'][!=] = item'->$
M[item'][=] = item'->$
M[item'][+=] = item'->$
M[item'][-=] = item'->$
M[item'][*=] = item'->$
M[item'][/=] = item'->$
M[item'][%=] = item'->$
M[item'][+] = item'->$
M[item'][-] = item'->$
M[item'][*] = item'->*factoritem'
M[item'][/] = item'->/factoritem'
M[item'][%] = item'->%factoritem'
M[item'][FLOAT] = 
M[item'][CHAR] = 
M[item'][STR] = 
M[item'][INT] = 


M[call_func][IDN] = 
M[call_func][(] = call_func->(es)
M[call_func][)] = call_func->$
M[call_func][int] = 
M[call_func][char] = 
M[call_func][float] = 
M[call_func][void] = 
M[call_func][,] = call_func->$
M[call_func][;] = call_func->$
M[call_func][{] = 
M[call_func][}] = 
M[call_func][init] = 
M[call_func][continue] = 
M[call_func][break] = 
M[call_func][return] = 
M[call_func][while] = 
M[call_func][for] = 
M[call_func][if] = 
M[call_func][else] = 
M[call_func][&&] = call_func->$
M[call_func][||] = call_func->$
M[call_func][++] = call_func->$
M[call_func][--] = call_func->$
M[call_func][>] = call_func->$
M[call_func][>=] = call_func->$
M[call_func][<] = call_func->$
M[call_func][<=] = call_func->$
M[call_func][==] = call_func->$
M[call_func][!=] = call_func->$
M[call_func][=] = call_func->$
M[call_func][+=] = call_func->$
M[call_func][-=] = call_func->$
M[call_func][*=] = call_func->$
M[call_func][/=] = call_func->$
M[call_func][%=] = call_func->$
M[call_func][+] = call_func->$
M[call_func][-] = call_func->$
M[call_func][*] = call_func->$
M[call_func][/] = call_func->$
M[call_func][%] = call_func->$
M[call_func][FLOAT] = 
M[call_func][CHAR] = 
M[call_func][STR] = 
M[call_func][INT] = 


M[const][IDN] = 
M[const][(] = 
M[const][)] = 
M[const][int] = 
M[const][char] = 
M[const][float] = 
M[const][void] = 
M[const][,] = 
M[const][;] = 
M[const][{] = 
M[const][}] = 
M[const][init] = 
M[const][continue] = 
M[const][break] = 
M[const][return] = 
M[const][while] = 
M[const][for] = 
M[const][if] = 
M[const][else] = 
M[const][&&] = 
M[const][||] = 
M[const][++] = 
M[const][--] = 
M[const][>] = 
M[const][>=] = 
M[const][<] = 
M[const][<=] = 
M[const][==] = 
M[const][!=] = 
M[const][=] = 
M[const][+=] = 
M[const][-=] = 
M[const][*=] = 
M[const][/=] = 
M[const][%=] = 
M[const][+] = 
M[const][-] = 
M[const][*] = 
M[const][/] = 
M[const][%] = 
M[const][FLOAT] = const->FLOAT
M[const][CHAR] = const->CHAR
M[const][STR] = const->STR
M[const][INT] = const->num_const


M[es][IDN] = es->isnull_exprisnull_es
M[es][(] = es->isnull_exprisnull_es
M[es][)] = es->isnull_exprisnull_es
M[es][int] = 
M[es][char] = 
M[es][float] = 
M[es][void] = 
M[es][,] = es->isnull_exprisnull_es
M[es][;] = 
M[es][{] = 
M[es][}] = 
M[es][init] = 
M[es][continue] = 
M[es][break] = 
M[es][return] = 
M[es][while] = 
M[es][for] = 
M[es][if] = 
M[es][else] = 
M[es][&&] = 
M[es][||] = 
M[es][++] = 
M[es][--] = 
M[es][>] = 
M[es][>=] = 
M[es][<] = 
M[es][<=] = 
M[es][==] = 
M[es][!=] = 
M[es][=] = 
M[es][+=] = 
M[es][-=] = 
M[es][*=] = 
M[es][/=] = 
M[es][%=] = 
M[es][+] = 
M[es][-] = 
M[es][*] = 
M[es][/] = 
M[es][%] = 
M[es][FLOAT] = es->isnull_exprisnull_es
M[es][CHAR] = es->isnull_exprisnull_es
M[es][STR] = es->isnull_exprisnull_es
M[es][INT] = es->isnull_exprisnull_es


M[isnull_es][IDN] = 
M[isnull_es][(] = 
M[isnull_es][)] = isnull_es->$
M[isnull_es][int] = 
M[isnull_es][char] = 
M[isnull_es][float] = 
M[isnull_es][void] = 
M[isnull_es][,] = isnull_es->,isnull_exprisnull_es
M[isnull_es][;] = 
M[isnull_es][{] = 
M[isnull_es][}] = 
M[isnull_es][init] = 
M[isnull_es][continue] = 
M[isnull_es][break] = 
M[isnull_es][return] = 
M[isnull_es][while] = 
M[isnull_es][for] = 
M[isnull_es][if] = 
M[isnull_es][else] = 
M[isnull_es][&&] = 
M[isnull_es][||] = 
M[isnull_es][++] = 
M[isnull_es][--] = 
M[isnull_es][>] = 
M[isnull_es][>=] = 
M[isnull_es][<] = 
M[isnull_es][<=] = 
M[isnull_es][==] = 
M[isnull_es][!=] = 
M[isnull_es][=] = 
M[isnull_es][+=] = 
M[isnull_es][-=] = 
M[isnull_es][*=] = 
M[isnull_es][/=] = 
M[isnull_es][%=] = 
M[isnull_es][+] = 
M[isnull_es][-] = 
M[isnull_es][*] = 
M[isnull_es][/] = 
M[isnull_es][%] = 
M[isnull_es][FLOAT] = 
M[isnull_es][CHAR] = 
M[isnull_es][STR] = 
M[isnull_es][INT] = 


M[num_const][IDN] = 
M[num_const][(] = 
M[num_const][)] = 
M[num_const][int] = 
M[num_const][char] = 
M[num_const][float] = 
M[num_const][void] = 
M[num_const][,] = 
M[num_const][;] = 
M[num_const][{] = 
M[num_const][}] = 
M[num_const][init] = 
M[num_const][continue] = 
M[num_const][break] = 
M[num_const][return] = 
M[num_const][while] = 
M[num_const][for] = 
M[num_const][if] = 
M[num_const][else] = 
M[num_const][&&] = 
M[num_const][||] = 
M[num_const][++] = 
M[num_const][--] = 
M[num_const][>] = 
M[num_const][>=] = 
M[num_const][<] = 
M[num_const][<=] = 
M[num_const][==] = 
M[num_const][!=] = 
M[num_const][=] = 
M[num_const][+=] = 
M[num_const][-=] = 
M[num_const][*=] = 
M[num_const][/=] = 
M[num_const][%=] = 
M[num_const][+] = 
M[num_const][-] = 
M[num_const][*] = 
M[num_const][/] = 
M[num_const][%] = 
M[num_const][FLOAT] = 
M[num_const][CHAR] = 
M[num_const][STR] = 
M[num_const][INT] = num_const->INT



***************Grammar Table******************
S->func
func->typeIDN(args)func_body
type->int
type->char
type->float
type->void
type->$
args->typeIDNarg
args->$
arg->,typeIDNarg
arg->$
func_body->;
func_body->block
block->{stmts}
vars->,IDNinitvars
vars->$
stmts->stmtstmts
stmts->$
stmt->typeassign_stmt
stmt->jump_stmt
stmt->iteration_stmt
stmt->branch_stmt
assign_stmt->expression;
jump_stmt->continue;
jump_stmt->break;
jump_stmt->returnisnull_expr;
iteration_stmt->while(logical_expression)block
iteration_stmt->for(isnull_expr;isnull_expr;isnull_expr)block
branch_stmt->if(logical_expression)blockresult
result->elseblock
result->$
logical_expression->expressionbool_expression
bool_expression->lopexpressionbool_expression
bool_expression->$
lop->&&
lop->||
isnull_expr->expression
isnull_expr->$
expression->valueoperation
operation->compare_opvalue
operation->equal_opvalue
operation->++
operation->--
operation->$
compare_op->>
compare_op->>=
compare_op-><
compare_op-><=
compare_op->==
compare_op->!=
equal_op->=
equal_op->+=
equal_op->-=
equal_op->*=
equal_op->/=
equal_op->%=
value->itemvalue'
value'->+itemvalue'
value'->-itemvalue'
value'->$
item->factoritem'
item'->*factoritem'
item'->/factoritem'
item'->%factoritem'
item'->$
factor->(value)
factor->IDNcall_func
factor->const
call_func->(es)
call_func->$
es->isnull_exprisnull_es
isnull_es->,isnull_exprisnull_es
isnull_es->$
const->num_const
const->FLOAT
const->CHAR
const->STR
num_const->INT
